// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: proto/server/router.proto

package server

import (
	aws "github.com/ultraviolet-black/terraform-provider-cruiser/proto/providers/aws"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Router_Route_MethodsRule_Method int32

const (
	Router_Route_MethodsRule_GET     Router_Route_MethodsRule_Method = 0
	Router_Route_MethodsRule_HEAD    Router_Route_MethodsRule_Method = 1
	Router_Route_MethodsRule_POST    Router_Route_MethodsRule_Method = 2
	Router_Route_MethodsRule_PUT     Router_Route_MethodsRule_Method = 3
	Router_Route_MethodsRule_DELETE  Router_Route_MethodsRule_Method = 4
	Router_Route_MethodsRule_CONNECT Router_Route_MethodsRule_Method = 5
	Router_Route_MethodsRule_OPTIONS Router_Route_MethodsRule_Method = 6
	Router_Route_MethodsRule_TRACE   Router_Route_MethodsRule_Method = 7
	Router_Route_MethodsRule_PATCH   Router_Route_MethodsRule_Method = 8
)

// Enum value maps for Router_Route_MethodsRule_Method.
var (
	Router_Route_MethodsRule_Method_name = map[int32]string{
		0: "GET",
		1: "HEAD",
		2: "POST",
		3: "PUT",
		4: "DELETE",
		5: "CONNECT",
		6: "OPTIONS",
		7: "TRACE",
		8: "PATCH",
	}
	Router_Route_MethodsRule_Method_value = map[string]int32{
		"GET":     0,
		"HEAD":    1,
		"POST":    2,
		"PUT":     3,
		"DELETE":  4,
		"CONNECT": 5,
		"OPTIONS": 6,
		"TRACE":   7,
		"PATCH":   8,
	}
)

func (x Router_Route_MethodsRule_Method) Enum() *Router_Route_MethodsRule_Method {
	p := new(Router_Route_MethodsRule_Method)
	*p = x
	return p
}

func (x Router_Route_MethodsRule_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Router_Route_MethodsRule_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_router_proto_enumTypes[0].Descriptor()
}

func (Router_Route_MethodsRule_Method) Type() protoreflect.EnumType {
	return &file_proto_server_router_proto_enumTypes[0]
}

func (x Router_Route_MethodsRule_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Router_Route_MethodsRule_Method.Descriptor instead.
func (Router_Route_MethodsRule_Method) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

type Router_Route_SchemesRule_Scheme int32

const (
	Router_Route_SchemesRule_HTTP  Router_Route_SchemesRule_Scheme = 0
	Router_Route_SchemesRule_HTTPS Router_Route_SchemesRule_Scheme = 1
)

// Enum value maps for Router_Route_SchemesRule_Scheme.
var (
	Router_Route_SchemesRule_Scheme_name = map[int32]string{
		0: "HTTP",
		1: "HTTPS",
	}
	Router_Route_SchemesRule_Scheme_value = map[string]int32{
		"HTTP":  0,
		"HTTPS": 1,
	}
)

func (x Router_Route_SchemesRule_Scheme) Enum() *Router_Route_SchemesRule_Scheme {
	p := new(Router_Route_SchemesRule_Scheme)
	*p = x
	return p
}

func (x Router_Route_SchemesRule_Scheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Router_Route_SchemesRule_Scheme) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_router_proto_enumTypes[1].Descriptor()
}

func (Router_Route_SchemesRule_Scheme) Type() protoreflect.EnumType {
	return &file_proto_server_router_proto_enumTypes[1]
}

func (x Router_Route_SchemesRule_Scheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Router_Route_SchemesRule_Scheme.Descriptor instead.
func (Router_Route_SchemesRule_Scheme) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Router_Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0}
}

func (x *Router) GetRoutes() []*Router_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Router_Handler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Backend:
	//
	//	*Router_Handler_AwsLambda
	Backend isRouter_Handler_Backend `protobuf_oneof:"backend"`
}

func (x *Router_Handler) Reset() {
	*x = Router_Handler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Handler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Handler) ProtoMessage() {}

func (x *Router_Handler) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Handler.ProtoReflect.Descriptor instead.
func (*Router_Handler) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Router_Handler) GetBackend() isRouter_Handler_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *Router_Handler) GetAwsLambda() *aws.LambdaBackend {
	if x, ok := x.GetBackend().(*Router_Handler_AwsLambda); ok {
		return x.AwsLambda
	}
	return nil
}

type isRouter_Handler_Backend interface {
	isRouter_Handler_Backend()
}

type Router_Handler_AwsLambda struct {
	AwsLambda *aws.LambdaBackend `protobuf:"bytes,1,opt,name=aws_lambda,json=awsLambda,proto3,oneof"`
}

func (*Router_Handler_AwsLambda) isRouter_Handler_Backend() {}

type Router_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentName string                  `protobuf:"bytes,2,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty"`
	Matchers   []*Router_Route_Matcher `protobuf:"bytes,3,rep,name=matchers,proto3" json:"matchers,omitempty"`
	Handler    *Router_Handler         `protobuf:"bytes,4,opt,name=handler,proto3" json:"handler,omitempty"`
}

func (x *Router_Route) Reset() {
	*x = Router_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route) ProtoMessage() {}

func (x *Router_Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route.ProtoReflect.Descriptor instead.
func (*Router_Route) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Router_Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Router_Route) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *Router_Route) GetMatchers() []*Router_Route_Matcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

func (x *Router_Route) GetHandler() *Router_Handler {
	if x != nil {
		return x.Handler
	}
	return nil
}

type Router_Route_MethodsRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []Router_Route_MethodsRule_Method `protobuf:"varint,1,rep,packed,name=methods,proto3,enum=cruiser.server.Router_Route_MethodsRule_Method" json:"methods,omitempty"`
}

func (x *Router_Route_MethodsRule) Reset() {
	*x = Router_Route_MethodsRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route_MethodsRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route_MethodsRule) ProtoMessage() {}

func (x *Router_Route_MethodsRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route_MethodsRule.ProtoReflect.Descriptor instead.
func (*Router_Route_MethodsRule) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Router_Route_MethodsRule) GetMethods() []Router_Route_MethodsRule_Method {
	if x != nil {
		return x.Methods
	}
	return nil
}

type Router_Route_SchemesRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemes []Router_Route_SchemesRule_Scheme `protobuf:"varint,1,rep,packed,name=schemes,proto3,enum=cruiser.server.Router_Route_SchemesRule_Scheme" json:"schemes,omitempty"`
}

func (x *Router_Route_SchemesRule) Reset() {
	*x = Router_Route_SchemesRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route_SchemesRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route_SchemesRule) ProtoMessage() {}

func (x *Router_Route_SchemesRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route_SchemesRule.ProtoReflect.Descriptor instead.
func (*Router_Route_SchemesRule) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Router_Route_SchemesRule) GetSchemes() []Router_Route_SchemesRule_Scheme {
	if x != nil {
		return x.Schemes
	}
	return nil
}

type Router_Route_HeadersRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Router_Route_HeadersRule) Reset() {
	*x = Router_Route_HeadersRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route_HeadersRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route_HeadersRule) ProtoMessage() {}

func (x *Router_Route_HeadersRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route_HeadersRule.ProtoReflect.Descriptor instead.
func (*Router_Route_HeadersRule) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Router_Route_HeadersRule) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type Router_Route_HeadersRegexpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadersRegexp map[string]string `protobuf:"bytes,1,rep,name=headers_regexp,json=headersRegexp,proto3" json:"headers_regexp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Router_Route_HeadersRegexpRule) Reset() {
	*x = Router_Route_HeadersRegexpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route_HeadersRegexpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route_HeadersRegexpRule) ProtoMessage() {}

func (x *Router_Route_HeadersRegexpRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route_HeadersRegexpRule.ProtoReflect.Descriptor instead.
func (*Router_Route_HeadersRegexpRule) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *Router_Route_HeadersRegexpRule) GetHeadersRegexp() map[string]string {
	if x != nil {
		return x.HeadersRegexp
	}
	return nil
}

type Router_Route_QueriesRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries map[string]string `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Router_Route_QueriesRule) Reset() {
	*x = Router_Route_QueriesRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route_QueriesRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route_QueriesRule) ProtoMessage() {}

func (x *Router_Route_QueriesRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route_QueriesRule.ProtoReflect.Descriptor instead.
func (*Router_Route_QueriesRule) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *Router_Route_QueriesRule) GetQueries() map[string]string {
	if x != nil {
		return x.Queries
	}
	return nil
}

type Router_Route_Matcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//
	//	*Router_Route_Matcher_IsGrpcCall
	//	*Router_Route_Matcher_Host
	//	*Router_Route_Matcher_Path
	//	*Router_Route_Matcher_PathPrefix
	//	*Router_Route_Matcher_Methods
	//	*Router_Route_Matcher_Schemes
	//	*Router_Route_Matcher_Headers
	//	*Router_Route_Matcher_HeadersRegexp
	//	*Router_Route_Matcher_Queries
	Rule isRouter_Route_Matcher_Rule `protobuf_oneof:"rule"`
}

func (x *Router_Route_Matcher) Reset() {
	*x = Router_Route_Matcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_server_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router_Route_Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router_Route_Matcher) ProtoMessage() {}

func (x *Router_Route_Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router_Route_Matcher.ProtoReflect.Descriptor instead.
func (*Router_Route_Matcher) Descriptor() ([]byte, []int) {
	return file_proto_server_router_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (m *Router_Route_Matcher) GetRule() isRouter_Route_Matcher_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *Router_Route_Matcher) GetIsGrpcCall() bool {
	if x, ok := x.GetRule().(*Router_Route_Matcher_IsGrpcCall); ok {
		return x.IsGrpcCall
	}
	return false
}

func (x *Router_Route_Matcher) GetHost() string {
	if x, ok := x.GetRule().(*Router_Route_Matcher_Host); ok {
		return x.Host
	}
	return ""
}

func (x *Router_Route_Matcher) GetPath() string {
	if x, ok := x.GetRule().(*Router_Route_Matcher_Path); ok {
		return x.Path
	}
	return ""
}

func (x *Router_Route_Matcher) GetPathPrefix() string {
	if x, ok := x.GetRule().(*Router_Route_Matcher_PathPrefix); ok {
		return x.PathPrefix
	}
	return ""
}

func (x *Router_Route_Matcher) GetMethods() *Router_Route_MethodsRule {
	if x, ok := x.GetRule().(*Router_Route_Matcher_Methods); ok {
		return x.Methods
	}
	return nil
}

func (x *Router_Route_Matcher) GetSchemes() *Router_Route_SchemesRule {
	if x, ok := x.GetRule().(*Router_Route_Matcher_Schemes); ok {
		return x.Schemes
	}
	return nil
}

func (x *Router_Route_Matcher) GetHeaders() *Router_Route_HeadersRule {
	if x, ok := x.GetRule().(*Router_Route_Matcher_Headers); ok {
		return x.Headers
	}
	return nil
}

func (x *Router_Route_Matcher) GetHeadersRegexp() *Router_Route_HeadersRegexpRule {
	if x, ok := x.GetRule().(*Router_Route_Matcher_HeadersRegexp); ok {
		return x.HeadersRegexp
	}
	return nil
}

func (x *Router_Route_Matcher) GetQueries() *Router_Route_QueriesRule {
	if x, ok := x.GetRule().(*Router_Route_Matcher_Queries); ok {
		return x.Queries
	}
	return nil
}

type isRouter_Route_Matcher_Rule interface {
	isRouter_Route_Matcher_Rule()
}

type Router_Route_Matcher_IsGrpcCall struct {
	IsGrpcCall bool `protobuf:"varint,1,opt,name=is_grpc_call,json=isGrpcCall,proto3,oneof"`
}

type Router_Route_Matcher_Host struct {
	Host string `protobuf:"bytes,2,opt,name=host,proto3,oneof"`
}

type Router_Route_Matcher_Path struct {
	Path string `protobuf:"bytes,3,opt,name=path,proto3,oneof"`
}

type Router_Route_Matcher_PathPrefix struct {
	PathPrefix string `protobuf:"bytes,4,opt,name=path_prefix,json=pathPrefix,proto3,oneof"`
}

type Router_Route_Matcher_Methods struct {
	Methods *Router_Route_MethodsRule `protobuf:"bytes,5,opt,name=methods,proto3,oneof"`
}

type Router_Route_Matcher_Schemes struct {
	Schemes *Router_Route_SchemesRule `protobuf:"bytes,6,opt,name=schemes,proto3,oneof"`
}

type Router_Route_Matcher_Headers struct {
	Headers *Router_Route_HeadersRule `protobuf:"bytes,7,opt,name=headers,proto3,oneof"`
}

type Router_Route_Matcher_HeadersRegexp struct {
	HeadersRegexp *Router_Route_HeadersRegexpRule `protobuf:"bytes,8,opt,name=headers_regexp,json=headersRegexp,proto3,oneof"`
}

type Router_Route_Matcher_Queries struct {
	Queries *Router_Route_QueriesRule `protobuf:"bytes,9,opt,name=queries,proto3,oneof"`
}

func (*Router_Route_Matcher_IsGrpcCall) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_Host) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_Path) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_PathPrefix) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_Methods) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_Schemes) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_Headers) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_HeadersRegexp) isRouter_Route_Matcher_Rule() {}

func (*Router_Route_Matcher_Queries) isRouter_Route_Matcher_Rule() {}

var File_proto_server_router_proto protoreflect.FileDescriptor

var file_proto_server_router_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x72, 0x75,
	0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x20, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x61, 0x77, 0x73,
	0x2f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x0d,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5b,
	0x0a, 0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x77, 0x73,
	0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x61, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x42, 0x09, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0xec, 0x0b, 0x0a, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x1a, 0xc4, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x22, 0x6a, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x08, 0x1a, 0x77, 0x0a,
	0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48,
	0x54, 0x54, 0x50, 0x53, 0x10, 0x01, 0x1a, 0x9a, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xbf, 0x01, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x1a, 0x40, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9a, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xf5, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x47, 0x72, 0x70, 0x63, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x72,
	0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x44, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x42, 0xc0, 0x01, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x42, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6c, 0x74,
	0x72, 0x61, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x74, 0x2d, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x2f, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2d, 0x63, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02, 0x0e, 0x43,
	0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xca, 0x02, 0x0e,
	0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0xe2, 0x02,
	0x1a, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x72, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x43, 0x72,
	0x75, 0x69, 0x73, 0x65, 0x72, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_server_router_proto_rawDescOnce sync.Once
	file_proto_server_router_proto_rawDescData = file_proto_server_router_proto_rawDesc
)

func file_proto_server_router_proto_rawDescGZIP() []byte {
	file_proto_server_router_proto_rawDescOnce.Do(func() {
		file_proto_server_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_server_router_proto_rawDescData)
	})
	return file_proto_server_router_proto_rawDescData
}

var file_proto_server_router_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_server_router_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_server_router_proto_goTypes = []interface{}{
	(Router_Route_MethodsRule_Method)(0),   // 0: cruiser.server.Router.Route.MethodsRule.Method
	(Router_Route_SchemesRule_Scheme)(0),   // 1: cruiser.server.Router.Route.SchemesRule.Scheme
	(*Router)(nil),                         // 2: cruiser.server.Router
	(*Router_Handler)(nil),                 // 3: cruiser.server.Router.Handler
	(*Router_Route)(nil),                   // 4: cruiser.server.Router.Route
	(*Router_Route_MethodsRule)(nil),       // 5: cruiser.server.Router.Route.MethodsRule
	(*Router_Route_SchemesRule)(nil),       // 6: cruiser.server.Router.Route.SchemesRule
	(*Router_Route_HeadersRule)(nil),       // 7: cruiser.server.Router.Route.HeadersRule
	(*Router_Route_HeadersRegexpRule)(nil), // 8: cruiser.server.Router.Route.HeadersRegexpRule
	(*Router_Route_QueriesRule)(nil),       // 9: cruiser.server.Router.Route.QueriesRule
	(*Router_Route_Matcher)(nil),           // 10: cruiser.server.Router.Route.Matcher
	nil,                                    // 11: cruiser.server.Router.Route.HeadersRule.HeadersEntry
	nil,                                    // 12: cruiser.server.Router.Route.HeadersRegexpRule.HeadersRegexpEntry
	nil,                                    // 13: cruiser.server.Router.Route.QueriesRule.QueriesEntry
	(*aws.LambdaBackend)(nil),              // 14: cruiser.providers.aws.LambdaBackend
}
var file_proto_server_router_proto_depIdxs = []int32{
	4,  // 0: cruiser.server.Router.routes:type_name -> cruiser.server.Router.Route
	14, // 1: cruiser.server.Router.Handler.aws_lambda:type_name -> cruiser.providers.aws.LambdaBackend
	10, // 2: cruiser.server.Router.Route.matchers:type_name -> cruiser.server.Router.Route.Matcher
	3,  // 3: cruiser.server.Router.Route.handler:type_name -> cruiser.server.Router.Handler
	0,  // 4: cruiser.server.Router.Route.MethodsRule.methods:type_name -> cruiser.server.Router.Route.MethodsRule.Method
	1,  // 5: cruiser.server.Router.Route.SchemesRule.schemes:type_name -> cruiser.server.Router.Route.SchemesRule.Scheme
	11, // 6: cruiser.server.Router.Route.HeadersRule.headers:type_name -> cruiser.server.Router.Route.HeadersRule.HeadersEntry
	12, // 7: cruiser.server.Router.Route.HeadersRegexpRule.headers_regexp:type_name -> cruiser.server.Router.Route.HeadersRegexpRule.HeadersRegexpEntry
	13, // 8: cruiser.server.Router.Route.QueriesRule.queries:type_name -> cruiser.server.Router.Route.QueriesRule.QueriesEntry
	5,  // 9: cruiser.server.Router.Route.Matcher.methods:type_name -> cruiser.server.Router.Route.MethodsRule
	6,  // 10: cruiser.server.Router.Route.Matcher.schemes:type_name -> cruiser.server.Router.Route.SchemesRule
	7,  // 11: cruiser.server.Router.Route.Matcher.headers:type_name -> cruiser.server.Router.Route.HeadersRule
	8,  // 12: cruiser.server.Router.Route.Matcher.headers_regexp:type_name -> cruiser.server.Router.Route.HeadersRegexpRule
	9,  // 13: cruiser.server.Router.Route.Matcher.queries:type_name -> cruiser.server.Router.Route.QueriesRule
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_server_router_proto_init() }
func file_proto_server_router_proto_init() {
	if File_proto_server_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_server_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Handler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route_MethodsRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route_SchemesRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route_HeadersRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route_HeadersRegexpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route_QueriesRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_server_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router_Route_Matcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_server_router_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Router_Handler_AwsLambda)(nil),
	}
	file_proto_server_router_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Router_Route_Matcher_IsGrpcCall)(nil),
		(*Router_Route_Matcher_Host)(nil),
		(*Router_Route_Matcher_Path)(nil),
		(*Router_Route_Matcher_PathPrefix)(nil),
		(*Router_Route_Matcher_Methods)(nil),
		(*Router_Route_Matcher_Schemes)(nil),
		(*Router_Route_Matcher_Headers)(nil),
		(*Router_Route_Matcher_HeadersRegexp)(nil),
		(*Router_Route_Matcher_Queries)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_server_router_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_server_router_proto_goTypes,
		DependencyIndexes: file_proto_server_router_proto_depIdxs,
		EnumInfos:         file_proto_server_router_proto_enumTypes,
		MessageInfos:      file_proto_server_router_proto_msgTypes,
	}.Build()
	File_proto_server_router_proto = out.File
	file_proto_server_router_proto_rawDesc = nil
	file_proto_server_router_proto_goTypes = nil
	file_proto_server_router_proto_depIdxs = nil
}
